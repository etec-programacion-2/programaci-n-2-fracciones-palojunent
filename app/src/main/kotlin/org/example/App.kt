/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

fun main() {
//PUNTO 1
    try {
        val fraccion1 = Fraccion(3, 4) //se le asignan los valores a la fracción 
        println("Fracción: ${fraccion1.mostrar()}") // se printea la fracción normal si el denominador es cero. 
    } catch (e: IllegalArgumentException) { //si en el try ocurre este error(el denominador de la fracción es cero), se ejecuta este catch.
        println("Error al crear fracción: ${e.message}") // se printea que el error es que el denominador de la fracción no puede ser cero, pero el codigo sigue funcionando. 
    }
    // PUNTO 2
    try {
            // Crear dos fracciones para el operador plus 
            val fraccion1 = Fraccion(8, 2) 
            val fraccion2 = Fraccion(4, 4)  
            
            // Sumar las fracciones
            val resultado = fraccion1 + fraccion2
            
            println("Fracción 1: ${fraccion1.mostrar()}")
            println("Fracción 2: ${fraccion2.mostrar()}")
            println("Suma: ${resultado.mostrar()}")
            val resultadoSimplificado = resultado.simplificar()
            println("Suma simplificada: ${resultadoSimplificado.mostrar()}")

 
        
    } catch (e: IllegalArgumentException) {
        println("Error: ${e.message}")
    }
    try {

               // Crear dos fracciones para el operador minus
            val fraccion1 = Fraccion(8, 2) 
            val fraccion2 = Fraccion(4, 4)  
            
            // restar las fracciones
            val resultado = fraccion1 - fraccion2
            
            println("Fracción 1: ${fraccion1.mostrar()}")
            println("Fracción 2: ${fraccion2.mostrar()}")
            println("Resta: ${resultado.mostrar()}")
            val resultadoSimplificado = resultado.simplificar()
            println("Resta simplificada: ${resultadoSimplificado.mostrar()}")

                        
    } catch (e: IllegalArgumentException) {
        println("Error: ${e.message}")
    }

    //PUNTO 3 
    try {
        val fraccion1 = Fraccion(8, 4)
        val fraccion2 = Fraccion(4, 4)  
        println("La multiplicación simplificada es: ${(fraccion1 * fraccion2).mostrar()}")
        } catch (e: IllegalArgumentException) { //si en el try ocurre este error(el denominador de la fracción es cero), se ejecuta este catch.
        println("Error al crear fracción, el operador no puede ser cero: ${e.message}") // se printea que el error es que el denominador de la fracción no puede ser cero, pero el codigo sigue funcionando. 
    }
     try {
        val fraccion1 = Fraccion(16, 4)
        val fraccion2 = Fraccion(4, 4)    
        println("La división simplificada es: ${(fraccion1 / fraccion2).mostrar()}")
        } catch (e: IllegalArgumentException) { //si en el try ocurre este error(el denominador de la fracción es cero), se ejecuta este catch.
            println("Error al crear fracción, el operador no puede se cero: ${e.message}") // se printea que el error es que el denominador de la fracción no puede ser cero, pero el codigo sigue funcionando. 
    }

    //PUNTO 4
    try {
    val fraccion1 = Fraccion(16, 4)
    val fraccion2 = Fraccion(4, 4) 
    println("Comparación: ${fraccion1.compareTo(fraccion2)}")
    println("Igualdad: ${fraccion1 == fraccion2}")
    println("fraccion1 es mayor que fraccion2: ${fraccion1.esMayor(fraccion2)}")
    println("fraccion1 es menor que fraccion2: ${fraccion1.esMenor(fraccion2)}")
    println("fraccion1 en decimal: ${fraccion1.aDecimal()}")
    val d1 = 1.75
    println("fraccion1 en fracción es: ${Fraccion.desdeDecimal(d1)}")
    } catch (e: IllegalArgumentException) { //si en el try ocurre este error(el denominador de la fracción es cero), se ejecuta este catch.
        println("Error al crear fracción, el operador no puede ser cero: ${e.message}") // se printea que el error es que el denominador de la fracción no puede ser cero, pero el codigo sigue funcionando.
    
    }
}


